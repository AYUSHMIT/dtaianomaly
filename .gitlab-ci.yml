# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/


# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

# There are two stages in this pipeline: unittest and workflow
stages:
  - unittest       # For simple unit tests
  - workflow       # For larger flows of the package
  - documentation  # For generating and checking the documentation


####################################################################################
#################################### UNIT TESTS ####################################
####################################################################################

# A template to run the different  unittests  in the different subpackages in separate jobs
.unit-test:
  stage: unittest  # Run in `unittest`stage
  before_script:
    - python --version ; pip --version
    - pip install -r requirements.txt
    - pip install pytest pytest-cov     # Packages for testing purposes
  script:
    # Test the requested package, print the code coverage, and generate a xml report of the tests
    - pytest ./tests --cov=dtaianomaly --cov-report term-missing --junitxml=report.xml -v

# Test the unit tests for python 3.7
unit-test-3.7:
  image: python:3.7
  extends: .unit-test
  only:
    - $CI_DEFAULT_BRANCH

# Test the unit tests for python 3.8
unit-test-3.8:
  image: python:3.8
  extends: .unit-test
  only:
    - $CI_DEFAULT_BRANCH

# Test for Python version 3.9, and generate the coverage report and the junit report for this version only
unit-test-3.9:
  image: python:3.9
  extends: .unit-test
  coverage: '/(?i)TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always  # Always save the urest report, and let it expire after a week
    reports:
      junit: report.xml
    expire_in: 1 weeks

# Test the unit tests for python 3.10
unit-test-3.10:
  image: python:3.10
  extends: .unit-test
  only:
    - $CI_DEFAULT_BRANCH

####################################################################################
##################################### WORKFLOW #####################################
####################################################################################

# A general template to run a workflow related job
.workflow:
  stage: workflow
  before_script:
    - python --version ; pip --version
    - pip install -r requirements.txt

# To easily run the main script with different versions
.workflow-main-script:
  extends: .workflow
  script:
    - python main.py
      --data_dir data
      --datasets_index_file datasets.csv
      --configuration_dir configurations
      --data data/Demo.json
      --algorithm algorithm/iforest_64.json
      --metric metric/auc_metrics.json
      --output output/output_all.json

# Use different versions of Python
main-script-3.7:
  image: python:3.7
  extends: .workflow-main-script

main-script-3.8:
  image: python:3.8
  extends: .workflow-main-script

main-script-3.9:
  image: python:3.9
  extends: .workflow-main-script

main-script-3.10:
  image: python:3.10
  extends: .workflow-main-script

# Check if the notebooks still run without any problems
# Just use python 3.9, because it is time consuming
run-notebooks:
  image: python:3.9
  extends: .workflow
  before_script:
    - pip install jupyter
  script:
    - mv dtaianomaly notebooks
    - cd notebooks
    - jupyter nbconvert --to notebook --execute *.ipynb

####################################################################################
################################### DOCUMENTATION ##################################
####################################################################################

# A template for the documentation jobs
.documentation:
  stage: documentation
  image: python:3.9-slim
  before_script:
    - apt-get update && apt-get install make --no-install-recommends -y
    - python -m pip install sphinx toml
    - cd docs

# Check the code in the documentation
doctest:
  extends: .documentation
  script:
    - make doctest

# Generate the documentation
pages:
  extends: .documentation
  script:
    - make html
  after_script:
    - mv docs/_build/html/ ./public/
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH