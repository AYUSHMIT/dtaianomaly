# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/


# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DEFAULT_PYTHON_VERSION: "3.10"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

# There are two stages in this pipeline: unittest and workflow
stages:
  - unit-test      # For simple unit tests
  - notebooks      # For running the notebooks
  - documentation  # For generating and checking the documentation

####################################################################################
#################################### UNIT TESTS ####################################
####################################################################################

# A template to run the different  unittests  in the different subpackages in separate jobs
.unit-test:
  stage: unit-test  # Run in `unittest`stage
  variables:
    PYTHON_VERSION: ""
  image: python:$PYTHON_VERSION
  before_script:
    - python --version ; pip --version
    - find . -name "requirement*" -type f -exec pip install -r '{}' ';'
    - pip list
  script:
    # Test the requested package, print the code coverage, and generate a xml report of the tests
    - pytest ./tests/ --cov=dtaianomaly --cov-report term-missing --junitxml=report.xml -v
  coverage: '/(?i)TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: report.xml
    expire_in: 1 weeks

# Execute unit tests for multiple Python versions
unit-test-3.8:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.8"

unit-test-3.9:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.9"

unit-test-3.10:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.10"

unit-test-3.11:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.11"

unit-test-3.12:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.12"

#####################################################################################
##################################### NOTEBOOKS #####################################
#####################################################################################

# Check if the notebooks still run without any problems
# Just use the default python version, because it is time-consuming
.notebooks:
  stage: notebooks
  needs: []  # Start as soon as possible, because this takes some time
  image: python:$DEFAULT_PYTHON_VERSION
  variables:
    NOTEBOOK: ""
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - python --version ; pip --version
    - find . -name "requirement*" -type f -exec pip install -r '{}' ';'
    - pip install -r requirements.txt
    - pip install jupyter
    - pip list
  script:
    - mv dtaianomaly notebooks  # To make sure that 'dtaianomaly' is available
    - cd notebooks
    - jupyter nbconvert --to notebook --execute $NOTEBOOK.ipynb

anomaly-detection-notebook:
  extends: .notebooks
  variables:
    NOTEBOOK: "Anomaly-detection"

custom-models-notebook:
  extends: .notebooks
  variables:
    NOTEBOOK: "Custom-models"

quantitative-evaluation-notebook:
  extends: .notebooks
  variables:
    NOTEBOOK: "Quantitative-evaluation"

####################################################################################
################################### DOCUMENTATION ##################################
####################################################################################

# A template for the documentation jobs
.documentation:
  stage: documentation
  image: python:$DEFAULT_PYTHON_VERSION-slim
  before_script:
    - apt-get update && apt-get install make --no-install-recommends -y
    - python -m pip install sphinx toml sphinx_rtd_theme nbsphinx
    - find . -name "requirement*" -type f -exec pip install -r '{}' ';'
    - cd docs
    - mkdir _static

# Check the code in the documentation
doctest:
  extends: .documentation
  script:
    - make doctest

# Generate the documentation
pages:
  extends: .documentation
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - make html
  after_script:
    - mv docs/_build/html/ ./public/
  artifacts:
    paths:
    - public
